#!/usr/bin/env node

"use strict";

process.bin = process.title = "lroxy";

var app = require("../lib/app.js");
var fs = require("fs");

var home = process.env["HOME"];
if (process.env["SUDO_USER"]) {
    // Hackishly build the user home with the sudo user name. We should indeed
    // obtain the user ID and get the real home by using getpwuid.
    home = (process.platform === "darwin" ? "/Users/" : "/home/") + process.env["SUDO_USER"];
}

var config = JSON.parse(fs.readFileSync(home + "/.lroxy.json"));

app.createHttpServer(config).listen(config["http_port"], function () {
    console.log("Running HTTP proxy on " + config["http_port"]);
});

if (config["ssl"]) {
    var key = config["sslKeyPath"] ? fs.readFileSync(config["sslKeyPath"]) : null;
    var cert = config["sslCertPath"] ? fs.readFileSync(config["sslCertPath"]) : null;
    var ca = config["sslCaPath"] ? fs.readFileSync(config["sslCaPath"]) : null;
    var pfx = config["sslPfxPath"] ? fs.readFileSync(config["sslPfxPath"]) : null;
    app.createHttpsServer({ key: key, cert: cert, ca: ca, pfx: pfx }, config).listen(config["https_port"], function () {
        console.log("Running HTTPS proxy on " + config["https_port"]);
    });
}

// If the program is running with sudo, downgrade the permission to the
// group/user that run this command.
if (process.env["SUDO_GID"]) {
    process.setgid(~~process.env["SUDO_GID"]);
}
if (process.env["SUDO_UID"]) {
    process.setuid(~~process.env["SUDO_UID"]);
}
